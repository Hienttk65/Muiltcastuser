#include "gurobi_c++.h"
#include <fstream>
using std::ofstream;
#include <cstdlib> // for exit function

using namespace std;
//Input
double w_mn[15][24] =
{
    {0.196078559,0.170533854,0.143984375,0.174347873,0.001,0.001,0.001,0.001,0.001,0.132075738,0.001,0.108728299,0.001,0.001,0.001,0.001,0.001,0.001519097,0.001,0.001,0.062939453,0.001,0.009792752,0.001},
    {0.001,0.064513889,0.001,0.053700087,0.001,0.001,0.001,0.001,0.007768012,0.036765408,0.001,0.001,0.001,0.001,0.001,0.000264757,0.001,0.001,0.001,0.001,0.19772678,0.219267578,0.217204861,0.202788628},
    {0.001,0.184050564,0.001,0.17757921,0.001,0.001,0.001,0.001,0.001,0.041818576,0.001,0.001,0.001,0.001,0.001,0.018003472,0.001,0.001,0.001,0.001,0.191916233,0.09992296,0.198878038,0.087830946},
    {0.188432075,0.195898438,0.201897786,0.194486762,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.088213976,0.001,0.092145182,0.001,0.001,0.001,0.012941623,4.45E-05,0.001,0.02593967,0.001},
    {0.224165582,0.226998698,0.230728082,0.217619358,0.001,0.001,0.001,0.001,0.001,0.002978516,0.001,0.001,0.001,0.001372613,0.001,0.017353516,0.001,0.001,0.001,0.001,0.037523872,0.001,0.041259766,0.001},
    {0.001,0.001,0.001,0.001,0.215591363,0.199197049,0.192827691,0.21625434,0.001,0.001,0.001,0.001,0.032297092,0.001,0.056148003,0.001,0.001,0.001,0.001,0.001,0.001,0.033128255,0.001,0.054556207},
    {0.059921875,0.199547526,0.104065755,0.177701823,0.001,0.001,0.001,0.001,0.001,0.000591363,0.001,0.001,0.001,0.002039931,0.001,0.089480252,0.001,0.001,0.001,0.001,0.170147569,0.001,0.196503906,0.001},
    {0.170793186,0.198678385,0.185508898,0.185735677,0.001,0.001,0.001,0.001,0.001,0.009881727,0.001,0.001,0.001,0.000416667,0.001,0.036372613,0.001,0.001,0.001,0.001,0.102938368,0.001,0.109674479,0.001},
    {0.001,0.001,0.001,0.001,0.123340929,0.001,0.129964193,0.001,0.012725694,0.001,0.001,0.001,0.001,0.001,0.038539497,1.95E-05,0.001,0.001,0.001,0.001,0.151846788,0.194378255,0.166253255,0.182931858},
    {0.24124783,0.236831597,0.232041016,0.240022786,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.01875217,0.001,0.014517144,0.001,0.00421224,0.001,0.012375217,0.001,0.001,0.001,0.001},
    {0.194873047,0.215894097,0.214552951,0.198463542,0.001,0.001,0.001,0.001,0.001,0.006559245,0.001,0.037861328,0.001,0.000737847,0.001,0.001,0.001,0.07085395,0.001,0.060203993,0.001,0.001,0.001,0.001},
    {0.001,0.001,0.001,0.001,0.200596788,0.1930523,0.1963227,0.204016927,0.001,0.001,0.001,0.001,0.082444661,0.001,0.086433377,0.001,0.001,0.001,0.011918403,0.001,0.001,0.000100911,0.001,0.025113932},
    {0.001,0.001,0.001,0.001,0.186854384,0.207999132,0.209352214,0.183709852,0.001,0.001,0.001,0.001,0.070888672,0.001,0.043003472,0.001,0.035354818,0.001,0.062837457,0.001,0.001,0.001,0.001,0.001},
    {0.001,0.023499349,0.001,0.074324002,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.092621528,0.124708116,0.001,0.001,0.001,0.001,0.177905816,0.145469835,0.166764323,0.194707031},
    {0.001,0.000587023,0.001,0.001,0.014089627,0.001,0.002694227,0.001,0.026599392,0.022411024,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.235639106,0.226715495,0.232667101,0.238597005},
};
//double B_nk[5] = { 37.93,52.73,108.68,206.11,375.63 };
//double Q_nk[5] = { 36.48,39.63,41.88,44.50,46.92 };
//double B_nk[5] = { 54.8589,131.70546667,250.52713333,515.88203333,933.84003333 };
//double Q_nk[5] = { 39.45100417,42.86252083,44.99038333,47.27652083,49.4189 };

//Diving
//HEVC
//double B_nk[5] = {158.145, 393.63226667, 752.26216667, 1481.5073, 2499.0174 };
//double Q_nk[5] = {34.4942625, 38.21816667, 40.97330417, 44.01035, 46.5721291 };
//SHVC
//double B_nk[5] = { 158.7274, 313.7716, 504.53496667, 1036.97606667, 1418.44986667 };
//double Q_nk[5] = { 34.50157917, 38.23774167, 40.8426, 43.88084167, 46.22081667 };

//RollerCoaster
//HEVC
//double B_nk[5] = { 54.8589, 131.70546667, 250.52713333, 515.88203333, 933.84003333 };
//double Q_nk[5] = { 39.45100417, 42.86252083, 44.99038333, 47.27652083, 49.4189 };
//SHVC
//double B_nk[5] = { 55.34356667, 106.74623333, 179.1021, 389.12966667, 632.93483333 };
//double Q_nk[5] = { 39.4550125, 42.71099167, 44.74273333, 47.127575, 49.225425 };

//Venice
//HEVC
//double B_nk[5] = { 60.06535417, 183.02339583, 384.8677625, 826.37731667, 1520.54744167 };
//double Q_nk[5] = { 32.734075, 36.0709625, 38.69187083, 41.75955, 44.76077917 };
//SHVC
//double B_nk[5] = { 50.34543333, 114.25253333, 216.2338, 483.58646667, 824.6864 };
//double Q_nk[5] = { 32.73595417, 35.91222083, 38.50054583, 41.56117917, 44.5169875 };

//Paris
//HEVC
//double B_nk[5] = { 60.78223333, 130.3771, 209.68793333, 340.2497, 532.43893333 };
//double Q_nk[5] = { 38.19624167, 42.19457917, 44.9861875, 47.88232083, 50.72166667 };
//SHVC
double B_nk[5] = { 61.44563333, 88.72683333, 114.01243333, 191.32106667, 293.73763333 };
double Q_nk[5] = { 38.195775, 41.9342625, 44.61600417, 47.54112917, 50.41202083 };


double p = 0.02;
//double p_m[15] = { 0.02, 0.031, 0.05, 0.079, 0.116, 0.155, 0.195, 0.253, 0.318, 0.36, 0.439, 0.515, 0.597, 0.675, 0.733 };
double R[20] = {50000,60000,70000,80000,90000,100000,110000,120000,150000,200000,250000,300000,350000,400000,450000,500000,550000,600000,650000,700000 };
//double R[20] = { 30000, 40000, 50000,60000,70000,80000,90000,100000, 120000, 140000,150000,200000,250000,300000,350000,400000,450000,500000,550000,600000 };
//double R[20] = { 20000, 40000,60000, 80000,100000,120000,140000,160000,180000,200000,240000,280000,320000,360000,400000,440000,480000,520000,560000,600000 };
double p_m[15] = {0.032, 0.039, 0.045, 0.052, 0.058 ,0.064, 0.071,0.077 ,0.096, 0.129, 0.161, 0.193, 0.225, 0.257, 0.289 };


int V_mn[15][24];
int K_mn[15][24];


//main
int
main(int   argc,
    char* argv[])
{
    string name_x = "x";
    string name_y = "y";
    string s;
    int count = 0;

    ofstream outdata; // outdata is like cin
    outdata.open("result_JUMPS.txt"); // opens the file
    if (!outdata) { // file couldn't be opened
        cerr << "Error: file could not be opened" << endl;
        exit(1);
    }
    outdata << "RC\tMax\tVP\tTV" << endl;

    for (int i = 0; i < 20; i++) {
        try {

            // Create an environment
            GRBEnv env = GRBEnv(true);
            env.set("LogFile", "non-SVC.log");
            env.start();

            // Create an empty model
            GRBModel model = GRBModel(env);

            // Create variables
            GRBVar x_nk[24][5];
            GRBVar y_mnk[15][24][5];
            for (int n = 0; n < 24; n++)
            {
                for (int k = 0; k < 5; k++)
                {
                    s = name_x;
                    s += to_string(count);
                    x_nk[n][k] = model.addVar(0.0, 1.0, 0.0, GRB_BINARY, s);
                    count++;
                }
            }
            count = 0;
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        s = name_y;
                        s += to_string(count);
                        y_mnk[m][n][k] = model.addVar(0.0, 1.0, 0.0, GRB_BINARY, s);

                        count++;
                    }
                }
            }



            // Set objective: maximize CT1

            GRBLinExpr CT1 = 0.0;
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        CT1 += w_mn[m][n] * log(B_nk[k]) * (x_nk[n][k] + y_mnk[m][n][k]);
                    }
                }
            }
            model.setObjective(CT1, GRB_MAXIMIZE);

            // Add constraint: CT2
            GRBLinExpr CT2 = 0.0;
            for (int n = 0; n < 24; n++)
            {
                for (int k = 0; k < 5; k++)
                {
                    CT2 += x_nk[n][k] * (B_nk[k] / p);
                }
            }
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        CT2 += y_mnk[m][n][k] * (B_nk[k] / p_m[m]);
                    }
                }
            }
            model.addConstr(CT2 <= R[i], "c0");

            // Add constraint: CT3
            count = 1;
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        s = "c";
                        s += to_string(count);
                        model.addConstr(x_nk[n][k] + y_mnk[m][n][k] <= 1, s);
                        count++;
                    }
                }
            }

            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    s = "c";
                    s += to_string(count);
                    GRBLinExpr CT_tmp = 0;
                    for (int k = 0; k < 5; k++)
                    {
                        CT_tmp += (x_nk[n][k] + y_mnk[m][n][k]);
                        
                    }
                    model.addConstr(CT_tmp == 1, s);
                    count++;
                }
            }
                       

            // Optimize model
            model.optimize();

           
            // Calculate viewport quality
            double VQ = 0;
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        double tmp =  (x_nk[n][k].get(GRB_DoubleAttr_X) + y_mnk[m][n][k].get(GRB_DoubleAttr_X));
                        if (int(tmp) == 1)
                        {
                            VQ = VQ + (w_mn[m][n] * Q_nk[k]);
                        }
                    }
                    
                }

            }
            // Calculate Tile version
            double TV = 0;
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        double tmp = (x_nk[n][k].get(GRB_DoubleAttr_X) + y_mnk[m][n][k].get(GRB_DoubleAttr_X));
                        if (int(tmp) == 1)
                        {
                            TV = TV + (w_mn[m][n] * (k+1));
                        }
                    }

                }

            }

            /* double TV = 0;
            for (int m = 0; m < 15; m++)
            {
                for (int n = 0; n < 24; n++)
                {
                    K_mn[m][n] = 0;
                    for (int k = 0; k < 5; k++)
                    {
                        K_mn[m][n] += (x_nk[n][k].get(GRB_DoubleAttr_X) + y_mnk[m][n][k].get(GRB_DoubleAttr_X));
                    }
                    TV = TV + (w_mn[m][n] * K_mn[m][n]);
                }

            }
            */

            cout << "Obj: " << model.get(GRB_DoubleAttr_ObjVal) << ",VQ: " << VQ << ",TV: " << TV << endl;

            outdata << R[i] << "\t" << model.get(GRB_DoubleAttr_ObjVal) << "\t" << VQ << "\t" << TV << endl;

        }
        catch (GRBException e) {
            cout << "Error code = " << e.getErrorCode() << endl;
            cout << e.getMessage() << endl;
        }
        catch (...) {
            cout << "Exception during optimization" << endl;
        }
    }
    outdata.close();
    return 0;
}
